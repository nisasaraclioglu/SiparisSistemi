@model List<SiparisSistemi.Models.Orders>

@{
    ViewData["Title"] = "Siparişlerim";
}

<div class="container mt-4">
    <h2 class="text-center mb-4">Siparişlerim</h2>

    @if (Model == null || !Model.Any())
    {
        <p class="text-center text-muted">Henüz siparişiniz bulunmamaktadır.</p>
    }
    else
    {
        <div class="text-end">
            <strong style="font-size: 1.2rem;">Bakiye: ₺@ViewBag.CustomerBalance.ToString("N2")</strong>
        </div>

        <!-- Sepeti Onayla Butonu -->
        <button id="approve-all-cart-btn" class="btn btn-success mb-3">Sepeti Onayla</button>

        <!-- Bekleyen Siparişler -->
        <h3>Bekleyen Siparişler</h3>
        <table class="table table-bordered table-striped">
            <thead class="table-dark">
                <tr>
                    <th>Sipariş No</th>
                    <th>Ürün Adı</th>
                    <th>Adet</th>
                    <th>Toplam Fiyat</th>
                    <th>Sipariş Tarihi</th>
                    <th>Durum</th>
                    <th>Kalan Süre</th>
                    <th>İşlem</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in Model.Where(o => o.OrderStatus == "Pending"))
                {
                    <tr>
                        <td>@order.OrderID</td>
                        <td>@order.Product?.ProductName</td>
                        <td>@order.Quantity</td>
                        <td>₺@order.TotalPrice.ToString("N2")</td>
                        <td>@order.OrderDate.ToString("dd-MM-yyyy HH:mm:ss")</td>
                        <td>
                            <span class="badge bg-primary">Bekliyor</span>
                        </td>
                        <td>
                            <span class="countdown-timer" data-expiry-time="@order.OrderDate.AddMinutes(1).ToString("O")">
                                00:00
                            </span>
                        </td>
                        <td>
                            <button class="btn btn-danger btn-sm delete-order-btn" data-id="@order.OrderID">Sil</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- Sepetin Toplam Tutarını Göster -->
        <div class="text-end mt-2">
            <strong>Sepet Toplamı: ₺@Model.Where(o => o.OrderStatus == "Pending").Sum(o => o.TotalPrice).ToString("N2")</strong>
        </div>


        <!-- Admin Onayı Bekleyen Siparişler -->
        <h3>Admin Onayı Bekleyen Siparişler</h3>
        <table class="table table-bordered table-striped">
            <thead class="table-dark">
                <tr>
                    <th>Sipariş No</th>
                    <th>Ürün Adı</th>
                    <th>Adet</th>
                    <th>Toplam Fiyat</th>
                    <th>Sipariş Tarihi</th>
                    <th>Durum</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in Model.Where(o => o.OrderStatus == "AwaitingApproval"))
                {
                    <tr>
                        <td>@order.OrderID</td>
                        <td>@order.Product?.ProductName</td>
                        <td>@order.Quantity</td>
                        <td>₺@order.TotalPrice.ToString("N2")</td>
                        <td>@order.OrderDate.ToString("dd-MM-yyyy HH:mm:ss")</td>
                        <td>
                            <span class="badge bg-warning">Admin Onayı Bekleniyor</span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- Tamamlanmış Siparişler -->
        <h3>Tamamlanmış Siparişler</h3>
        <table class="table table-bordered table-striped">
            <thead class="table-dark">
                <tr>
                    <th>Sipariş No</th>
                    <th>Ürün Adı</th>
                    <th>Adet</th>
                    <th>Toplam Fiyat</th>
                    <th>Sipariş Tarihi</th>
                    <th>Durum</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in Model.Where(o => o.OrderStatus == "Completed"))
                {
                    <tr>
                        <td>@order.OrderID</td>
                        <td>@order.Product?.ProductName</td>
                        <td>@order.Quantity</td>
                        <td>₺@order.TotalPrice.ToString("N2")</td>
                        <td>@order.OrderDate.ToString("dd-MM-yyyy HH:mm:ss")</td>
                        <td>
                            <span class="badge bg-success">Tamamlandı</span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- İptal Edilmiş Siparişler -->
        <h3>İptal Edilmiş Siparişler</h3>
        <table class="table table-bordered table-striped">
            <thead class="table-dark">
                <tr>
                    <th>Sipariş No</th>
                    <th>Ürün Adı</th>
                    <th>Adet</th>
                    <th>Toplam Fiyat</th>
                    <th>Sipariş Tarihi</th>
                    <th>Durum</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in Model.Where(o => o.OrderStatus == "Cancelled"))
                {
                    <tr>
                        <td>@order.OrderID</td>
                        <td>@order.Product?.ProductName</td>
                        <td>@order.Quantity</td>
                        <td>₺@order.TotalPrice.ToString("N2")</td>
                        <td>@order.OrderDate.ToString("dd-MM-yyyy HH:mm:ss")</td>
                        <td>
                            <span class="badge bg-danger">İptal Edildi</span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>
@section Scripts {
    <script>
                // Sepeti Onayla Butonu İşlemi
        $(document).on('click', '#approve-all-cart-btn', function () {
            $.post('/Customer/ApproveAllCart', function (response) {
                if (response.success) {
                    alert(response.message);
                    location.reload(); // Sayfayı tamamen yenile
                } else {
                    alert(response.message);
                }
            }).fail(function () {
                alert("Sepeti onaylama işlemi sırasında bir hata oluştu.");
            });
        });

        // Geri Sayım Fonksiyonu
        function startCountdown() {
            const timers = document.querySelectorAll('.countdown-timer');

            timers.forEach(timer => {
                const expiryTime = new Date(timer.getAttribute('data-expiry-time')).getTime();

                function updateTimer() {
                    const now = new Date().getTime();
                    const remainingTime = expiryTime - now;

                    if (remainingTime <= 0) {
                timer.textContent = "Süre Doldu";
                timer.classList.add('text-danger');

                // Süresi dolan siparişi iptal et
                const orderRow = timer.closest('tr');
                const orderIdElement = orderRow.querySelector('.delete-order-btn');

                if (orderIdElement) {
                    const orderId = orderIdElement.getAttribute('data-id');
                    cancelOrder(orderId, true);
                }

                // Geri sayımı durdur ve sıfırla
                clearInterval(timer.dataset.intervalId);
                timer.dataset.intervalId = null;
                } else {
                const minutes = Math.floor((remainingTime % (1000 * 60 * 60)) / (1000 * 60));
                const seconds = Math.floor((remainingTime % (1000 * 60)) / 1000);
                timer.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                }
                }

                updateTimer();
                const interval = setInterval(updateTimer, 1000);
                timer.dataset.intervalId = interval;
            });
        }

        // Sipariş İptal Fonksiyonu
        function cancelOrder(orderId, isExpired = false) {
            $.post('/Customer/CancelOrder', { orderId: orderId }, function (response) {
                if (response.success) {
                    // Bekleyen siparişler tablosundan satırı kaldır
                    const orderRow = $(`.delete-order-btn[data-id="${orderId}"]`).closest('tr');
                    const orderData = {
                        orderID: orderRow.find('td:eq(0)').text(),
                        productName: orderRow.find('td:eq(1)').text(),
                        quantity: orderRow.find('td:eq(2)').text(),
                        totalPrice: orderRow.find('td:eq(3)').text(),
                        orderDate: orderRow.find('td:eq(4)').text()
                    };

                    // İptal edilen siparişler tablosuna ekle
                    addToCancelledOrdersTable(orderData);

                    // Bekleyen siparişlerden kaldır
                    orderRow.remove();

                    // Sepet toplamını güncelle
                    updateCartTotal();

                    if (!isExpired) {
                        alert("Sipariş başarıyla iptal edildi.");
                    }
                } else {
                    alert(response.message || "Sipariş iptal edilirken bir hata oluştu.");
                }
            }).fail(function () {
                alert("Bir hata oluştu. Lütfen tekrar deneyin.");
            });
        }

        // İptal Edilen Siparişler Tablosuna Ekleme
        function addToCancelledOrdersTable(order) {
            const cancelledOrdersTableBody = $('h3:contains("İptal Edilmiş Siparişler")').next('table').find('tbody');
            const newRow = `
                <tr>
                    <td>${order.orderID}</td>
                    <td>${order.productName}</td>
                    <td>${order.quantity}</td>
                    <td>${order.totalPrice}</td>
                    <td>${order.orderDate}</td>
                    <td><span class="badge bg-danger">İptal Edildi</span></td>
                </tr>
            `;
            cancelledOrdersTableBody.append(newRow);
        }

        // Sepet Toplamını Güncelleme
        function updateCartTotal() {
            let total = 0;
            $('h3:contains("Bekleyen Siparişler")').next('table').find('tbody tr').each(function () {
                const priceText = $(this).find('td:eq(3)').text();
                const price = parseFloat(priceText.replace('₺', '').replace('.', '').replace(',', '.'));
                if (!isNaN(price)) {
                    total += price;
                }
            });

            $('.text-end.mt-2 strong').text(`Sepet Toplamı: ₺${total.toLocaleString('tr-TR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`);
        }

        // Sil Butonu için Event Handler
        $(document).on('click', '.delete-order-btn', function () {
            const orderId = $(this).data('id');
            if (confirm("Bu siparişi iptal etmek istediğinize emin misiniz?")) {
                cancelOrder(orderId);
            }
        });

        // Sayfa Yüklendiğinde Geri Sayımı Başlat
        $(document).ready(function () {
            startCountdown();
        });

    </script>
}