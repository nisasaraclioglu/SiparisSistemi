@model List<SiparisSistemi.Models.Orders>

@{
    ViewData["Title"] = "Siparişlerim";
}

<div class="container mt-4">
    <h2 class="text-center mb-4">Siparişlerim</h2>

    @if (Model == null || !Model.Any())
    {
        <p class="text-center text-muted">Henüz siparişiniz bulunmamaktadır.</p>
    }
    else
    {
        <!-- Sepeti Onayla Butonu -->
        <button id="approve-all-cart-btn" class="btn btn-success mb-3">Sepeti Onayla</button>

        <!-- Bekleyen Siparişler -->
        <h3>Bekleyen Siparişler</h3>
        <table class="table table-bordered table-striped">
            <thead class="table-dark">
                <tr>
                    <th>Sipariş No</th>
                    <th>Ürün Adı</th>
                    <th>Adet</th>
                    <th>Toplam Fiyat</th>
                    <th>Sipariş Tarihi</th>
                    <th>Durum</th>
                    <th>Kalan Süre</th>
                    <th>İşlem</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in Model.Where(o => o.OrderStatus == "Pending"))
                {
                    <tr>
                        <td>@order.OrderID</td>
                        <td>@order.Product?.ProductName</td>
                        <td>@order.Quantity</td>
                        <td>₺@order.TotalPrice.ToString("N2")</td>
                        <td>@order.OrderDate.ToString("dd-MM-yyyy HH:mm:ss")</td>
                        <td>
                            <span class="badge bg-primary">Bekliyor</span>
                        </td>
                        <td>
                            <span class="countdown-timer" data-expiry-time="@order.OrderDate.AddMinutes(1).ToString("O")">
                                00:00
                            </span>
                        </td>
                        <td>
                            <button class="btn btn-danger btn-sm delete-order-btn" data-id="@order.OrderID">Sil</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- Admin Onayı Bekleyen Siparişler -->
        <h3>Admin Onayı Bekleyen Siparişler</h3>
        <table class="table table-bordered table-striped">
            <thead class="table-dark">
                <tr>
                    <th>Sipariş No</th>
                    <th>Ürün Adı</th>
                    <th>Adet</th>
                    <th>Toplam Fiyat</th>
                    <th>Sipariş Tarihi</th>
                    <th>Durum</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in Model.Where(o => o.OrderStatus == "AwaitingApproval"))
                {
                    <tr>
                        <td>@order.OrderID</td>
                        <td>@order.Product?.ProductName</td>
                        <td>@order.Quantity</td>
                        <td>₺@order.TotalPrice.ToString("N2")</td>
                        <td>@order.OrderDate.ToString("dd-MM-yyyy HH:mm:ss")</td>
                        <td>
                            <span class="badge bg-warning">Admin Onayı Bekleniyor</span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- Tamamlanmış Siparişler -->
        <h3>Tamamlanmış Siparişler</h3>
        <table class="table table-bordered table-striped">
            <thead class="table-dark">
                <tr>
                    <th>Sipariş No</th>
                    <th>Ürün Adı</th>
                    <th>Adet</th>
                    <th>Toplam Fiyat</th>
                    <th>Sipariş Tarihi</th>
                    <th>Durum</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in Model.Where(o => o.OrderStatus == "Completed"))
                {
                    <tr>
                        <td>@order.OrderID</td>
                        <td>@order.Product?.ProductName</td>
                        <td>@order.Quantity</td>
                        <td>₺@order.TotalPrice.ToString("N2")</td>
                        <td>@order.OrderDate.ToString("dd-MM-yyyy HH:mm:ss")</td>
                        <td>
                            <span class="badge bg-success">Tamamlandı</span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- İptal Edilmiş Siparişler -->
        <h3>İptal Edilmiş Siparişler</h3>
        <table class="table table-bordered table-striped">
            <thead class="table-dark">
                <tr>
                    <th>Sipariş No</th>
                    <th>Ürün Adı</th>
                    <th>Adet</th>
                    <th>Toplam Fiyat</th>
                    <th>Sipariş Tarihi</th>
                    <th>Durum</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in Model.Where(o => o.OrderStatus == "Cancelled"))
                {
                    <tr>
                        <td>@order.OrderID</td>
                        <td>@order.Product?.ProductName</td>
                        <td>@order.Quantity</td>
                        <td>₺@order.TotalPrice.ToString("N2")</td>
                        <td>@order.OrderDate.ToString("dd-MM-yyyy HH:mm:ss")</td>
                        <td>
                            <span class="badge bg-danger">İptal Edildi</span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>
@section Scripts {
    <script>
                $(document).on('click', '#approve-all-cart-btn', function () {
            $.post('/Customer/ApproveAllCart', function (response) {
                if (response.success) {
                    alert(response.message); // Başarı mesajını göster
                    location.reload(); // Sayfayı yenile
                } else {
                    alert(response.message); // Hata mesajını göster
                }
            }).fail(function () {
                alert("Sepeti onaylama işlemi sırasında bir hata oluştu.");
            });
        });

        // Geri sayım fonksiyonu
        function startCountdown() {
            const timers = document.querySelectorAll('.countdown-timer');

            timers.forEach(timer => {
                const expiryTime = new Date(timer.getAttribute('data-expiry-time')).getTime();

                function updateTimer() {
                    const now = new Date().getTime();
                    const remainingTime = expiryTime - now;

                    if (remainingTime <= 0) {
                        timer.textContent = "Süre Doldu";
                        timer.classList.add('text-danger');

                        // Süresi dolmuş siparişleri kontrol et ve DOM'u güncelle
                        checkExpiredOrders();
                    } else {
                        const minutes = Math.floor((remainingTime % (1000 * 60 * 60)) / (1000 * 60));
                        const seconds = Math.floor((remainingTime % (1000 * 60)) / 1000);
                        timer.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                    }
                }

                updateTimer(); // Hemen başlat
                setInterval(updateTimer, 1000); // Her saniye güncelle
            });
        }

        // Süresi dolmuş siparişleri kontrol eden fonksiyon
        function checkExpiredOrders() {
            $.post('/Customer/CancelExpiredOrders', function (response) {
                if (response.success) {
                    console.log(response.message); // Konsola bilgi mesajı
                    updateOrdersUI(); // DOM'u güncelle
                } else {
                    alert(response.message); // Hata mesajını göster
                }
            }).fail(function () {
                alert("Süresi dolmuş siparişleri kontrol ederken bir hata oluştu.");
            });
        }

        // DOM'u yenilemeden sipariş listesini güncelle
        function updateOrdersUI() {
            $.get('/Customer/Orders', function (html) {
                const newContent = $(html).find('.container').html(); // Yeni içerik
                $('.container').html(newContent); // Mevcut içeriği değiştir
                startCountdown(); // Geri sayımı yeniden başlat
            });
        }

        // Sayfa yüklendiğinde geri sayımı başlat
        document.addEventListener('DOMContentLoaded', startCountdown);

        // Sil Butonu
        $(document).on('click', '.delete-order-btn', function () {
            const orderId = $(this).data('id');
            if (confirm("Bu siparişi iptal etmek istediğinize emin misiniz?")) {
                $.post('/Customer/CancelOrder', { orderId: orderId }, function (response) {
                    if (response.success) {
                        alert(response.message);
                        updateOrdersUI(); // Sadece DOM'u güncelle
                    } else {
                        alert(response.message);
                    }
                }).fail(function () {
                    alert("Bir hata oluştu. Lütfen tekrar deneyin.");
                });
            }
        });
    </script>
}
