@model List<SiparisSistemi.Models.Orders>
@{
    ViewData["Title"] = "Sipariş Onaylama";
}

<div class="admin-container">
    <div class="admin-sidebar">
        <div class="admin-header">
            <h2>Tech<span class="store-highlight">Store</span></h2>
            <p>Admin Panel</p>
        </div>
        <nav class="admin-nav">
            <a href="@Url.Action("Dashboard", "Admin")" class="admin-nav-item">
                <i class="fas fa-home"></i> Ana Sayfa
            </a>
            <a href="@Url.Action("AddProduct", "Admin")" class="admin-nav-item">
                <i class="fas fa-plus"></i> Ürün Ekle
            </a>
            <a href="@Url.Action("OrdersApproval", "Admin")" class="admin-nav-item active">
                <i class="fas fa-list"></i> Sipariş Onaylama
            </a>
            <a href="@Url.Action("ApprovedOrders", "Admin")" class="admin-nav-item">
                <i class="fas fa-list"></i> Tüm Siparişler
            </a>
            <a href="@Url.Action("Logout", "Login")" class="admin-nav-item">
                <i class="fas fa-sign-out-alt"></i> Çıkış Yap
            </a>

            <!-- Log Paneli -->
            <div class="sidebar-log-panel">
                <h6>Loglar</h6>
                <ul id="logList" class="log-list">
                </ul>
            </div>
        </nav>
    </div>
    <div class="admin-content">
        <div class="admin-content-header">
            <div class="header-left">
                <h3><i class="fas fa-list"></i> Sipariş Onaylama</h3>
                <p>Bekleyen siparişlerin onaylama işlemini gerçekleştirin</p>
            </div>
        </div>

        @if (Model == null || !Model.Any())
        {
            <div class="alert alert-info text-center">
                Henüz onay bekleyen bir sipariş bulunmamaktadır.
            </div>
        }
        else
        {
            <div class="mb-3">
                <button onclick="approveAllOrders()" class="btn btn-success">
                    <i class="fas fa-check-double"></i> Tüm Siparişleri Onayla
                </button>
            </div>
            <div class="table-responsive">
                <table class="table table-bordered table-striped compact-table">
                    <thead class="table-dark">
                        <tr>
                            <th>Sipariş No</th>
                            <th>Ürün Adı</th>
                            <th>Müşteri ID</th>
                            <th>Adet</th>
                            <th>Toplam Fiyat</th>
                            <th>Sipariş Tarihi</th>
                            <th>Durum</th>
                            <th>İşlem</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var order in Model)
                        {
                            <tr id="order-@order.OrderID">
                                <td>@order.OrderID</td>
                                <td>@order.Product?.ProductName ?? "Bilinmiyor"</td>
                                <td>@order.CustomerID</td>
                                <td>@order.Quantity</td>
                                <td>₺@order.TotalPrice.ToString("N2")</td>
                                <td>@order.OrderDate.ToString("dd-MM-yyyy HH:mm:ss")</td>
                                <td>
                                    <span class="badge bg-warning">Admin Onayı Bekliyor</span>
                                </td>
                                <td>
                                    <button onclick="approveOrder(@order.OrderID)" class="btn btn-sm btn-success" title="Onayla">
                                        <i class="fas fa-check"></i> Onayla
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        let lastOrderId = 0;

        // Yeni siparişleri kontrol eden fonksiyon
        function checkNewOrders() {
            $.ajax({
                url: '/Admin/GetNewOrders',
                type: 'GET',
                data: { lastOrderId: lastOrderId },
                success: function(response) {
                    console.log("Yeni Siparişler:", response); // Debug için
                    if (response && response.success && response.orders && response.orders.length > 0) {
                        lastOrderId = Math.max(...response.orders.map(order => order.orderID));
                        response.orders.forEach(order => {
                            if (!$(`#order-${order.orderID}`).length) {
                                addNewOrderToTable(order);
                            }
                        });
                    }
                }
            });
        }

        // Yeni siparişi tabloya ekleyen fonksiyon
        function addNewOrderToTable(order) {
            const tbody = $('.table tbody');
            const row = `
                <tr id="order-${order.orderID}">
                    <td>${order.orderID}</td>
                    <td>${order.customerID || 'Belirtilmemiş'}</td>
                    <td>${order.productName || 'Belirtilmemiş'}</td>
                    <td>${order.quantity || 0}</td>
                    <td>${order.totalPrice ? order.totalPrice.toFixed(2) : '0.00'} ₺</td>
                    <td>${formatDate(order.orderDate)}</td>
                    <td>${getStatusBadge(order.status)}</td>
                    <td>
                        <button class="btn btn-success btn-sm" onclick="approveOrder(${order.orderID})">
                            Onayla
                        </button>
                    </td>
                </tr>
            `;
            $(row).prependTo(tbody).hide().fadeIn(1000).css('background-color', '#e6ffe6')
                .delay(1000).queue(function(next){
                    $(this).css('background-color', '');
                    next();
                });
        }

        // Tarih formatı düzenleme fonksiyonu
        function formatDate(dateString) {
            if (!dateString) return 'Tarih Belirtilmemiş';
            const date = new Date(dateString);
            if (isNaN(date.getTime())) return dateString; // Eğer geçerli bir tarih değilse
            return date.toLocaleString('tr-TR', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            });
        }

        // İlk yükleme ve periyodik kontrol
        $(document).ready(function() {
            $.ajax({
                url: '/Admin/GetAwaitingApprovalOrders',
                method: 'GET',
                success: function(response) {
                    console.log("İlk Yükleme Response:", response); // Debug için
                    if (response.success && response.orders && response.orders.length > 0) {
                        const tbody = $('.table tbody');
                        tbody.html('');
                        lastOrderId = Math.max(...response.orders.map(order => order.orderID));
                        response.orders.forEach(order => addNewOrderToTable(order));
                    }
                },
                error: function(error) {
                    console.error("Siparişler yüklenirken hata:", error);
                }
            });

            setInterval(checkNewOrders, 1000);
        });

        // Status badge fonksiyonu güncellendi
        function getStatusBadge(status) {
            switch (status ? status.toLowerCase() : '') {
                case "completed":
                    return '<span class="badge bg-success">Tamamlandı</span>';
                case "pending":
                    return '<span class="badge bg-warning text-dark">Bekliyor</span>';
                case "cancelled":
                    return '<span class="badge bg-danger">İptal Edildi</span>';
                case "awaitingapproval":
                    return '<span class="badge bg-secondary">Admin Onayı Bekliyor</span>';
                default:
                    return '<span class="badge bg-secondary">Durum Belirtilmemiş</span>';
            }
        }

        // Sipariş onaylama fonksiyonu
        function approveOrder(orderId) {
            Swal.fire({
                title: 'Siparişi Onaylamak İstiyor Musunuz?',
                text: "Bu siparişi onaylamaya devam etmek istiyor musunuz?",
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#28a745',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Evet, Onayla',
                cancelButtonText: 'İptal'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '/Admin/ApproveOrder',
                        type: 'POST',
                        data: { orderId: orderId },
                        success: function (response) {
                            if (response.success) {
                                // Animasyonlu silme efekti
                                $(`#order-${orderId}`).fadeOut(400, function() {
                                    $(this).remove();
                                });
                                Swal.fire('Onaylandı!', response.message, 'success');
                            } else {
                                Swal.fire('Hata!', response.message, 'error');
                            }
                        },
                        error: function () {
                            Swal.fire('Hata!', 'Sipariş onaylanırken bir hata oluştu.', 'error');
                        }
                    });
                }
            });
        }

        // Tüm siparişleri onaylama fonksiyonu
        function approveAllOrders() {
            Swal.fire({
                title: 'Tüm Siparişleri Onaylamak İstiyor Musunuz?',
                text: "Bekleyen tüm siparişleri onaylamaya devam etmek istiyor musunuz?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#28a745',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Evet, Hepsini Onayla',
                cancelButtonText: 'İptal'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '/Admin/ApproveAllOrders',
                        type: 'POST',
                        success: function (response) {
                            if (response.success) {
                                // Tüm bekleyen siparişleri animasyonlu şekilde kaldır
                                $('.table tbody tr').fadeOut(400, function() {
                                    $(this).remove();
                                });
                                Swal.fire('Onaylandı!', response.message, 'success');
                            } else {
                                Swal.fire('Hata!', response.message, 'error');
                            }
                        },
                        error: function () {
                            Swal.fire('Hata!', 'Siparişler onaylanırken bir hata oluştu.', 'error');
                        }
                    });
                }
            });
        }

    </script>
}
<script>

    function fetchLogs() {
        $.ajax({
            url: '@Url.Action("FetchLogs", "Admin")', // FetchLogs action'ı
            method: 'GET',
            success: function (data) {
                $('#logList').html(''); // Mevcut logları temizle
                data.forEach(function (log) {
                    const logItem = `
                        <li>
                            <span><strong>${log.logType}:</strong> ${log.logDetails}</span>
                            <div style="font-size: 10px; color: #888; margin-top: 5px;">${log.logDate}</div>
                        </li>
                    `;
                    $('#logList').append(logItem);
                });
            },
            error: function () {
                console.error("Loglar yüklenemedi.");
            }
        });
    }

    // Logları her saniyede bir güncelle
    setInterval(fetchLogs, 500);

    // Sayfa yüklendiğinde logları getir
    $(document).ready(fetchLogs);

</script>