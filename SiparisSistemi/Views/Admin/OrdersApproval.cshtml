@model List<SiparisSistemi.Models.Orders>
@{
    ViewData["Title"] = "Sipariş Onaylama";
}

<div class="admin-container">
    <div class="admin-sidebar">
        <div class="admin-header">
            <h2>Tech<span class="store-highlight">Store</span></h2>
            <p>Admin Panel</p>
        </div>
        <nav class="admin-nav">
            <a href="@Url.Action("Dashboard", "Admin")" class="admin-nav-item">
                <i class="fas fa-home"></i> Ana Sayfa
            </a>
            <a href="@Url.Action("AddProduct", "Admin")" class="admin-nav-item">
                <i class="fas fa-plus"></i> Ürün Ekle
            </a>
            <a href="@Url.Action("OrdersApproval", "Admin")" class="admin-nav-item active">
                <i class="fas fa-list"></i> Sipariş Onaylama
            </a>
            <a href="@Url.Action("ApprovedOrders", "Admin")" class="admin-nav-item">
                <i class="fas fa-list"></i> Tüm Siparişler
            </a>
            <a href="@Url.Action("Logout", "Login")" class="admin-nav-item">
                <i class="fas fa-sign-out-alt"></i> Çıkış Yap
            </a>

            <!-- Log Paneli -->
            <div class="sidebar-log-panel">
                <h6>Loglar</h6>
                <ul id="logList" class="log-list">
                </ul>
            </div>
        </nav>
    </div>
    <div class="admin-content">
        <div class="admin-content-header">
            <div class="header-left">
                <h3><i class="fas fa-list"></i> Sipariş Onaylama</h3>
            </div>
        </div>
        <div class="table-responsive">
            <div class="mb-3 d-flex justify-content-between">
                <div>
                    <!-- Tüm Siparişleri Onayla Butonu -->
                    <button onclick="approveAllOrders()" class="btn btn-success me-2">
                        <i class="fas fa-check-double"></i> Tüm Siparişleri Onayla
                    </button>
                    <!-- Tüm Siparişleri Reddet Butonu -->
                    <button onclick="rejectAllOrders()" class="btn btn-danger">
                        <i class="fas fa-times-circle"></i> Tüm Siparişleri Reddet
                    </button>
                </div>
            </div>
            <table class="table table-bordered table-striped compact-table">
                <thead class="table-dark">
                    <tr>
                        <th>Sipariş No</th>
                        <th>Ürün Adı</th>
                        <th>Müşteri ID</th>
                        <th>Adet</th>
                        <th>Toplam Fiyat</th>
                        <th>Sipariş Tarihi</th>
                        <th>Durum</th>
                        <th>İşlem</th>
                        <th>Onayla</th>
                        <th>Reddet</th>
                    </tr>
                </thead>
                <tbody id="ordersTableBody">
                    @if (Model != null && Model.Any())
                    {
                        @foreach (var order in Model)
                        {
                            <tr id="order-@order.OrderID">
                                <td>@order.OrderID</td>
                                <td>@order.Product?.ProductName ?? "Bilinmiyor"</td>
                                <td>@order.CustomerID</td>
                                <td>@order.Quantity</td>
                                <td>₺@order.TotalPrice.ToString("N2")</td>
                                <td>@order.OrderDate.ToString("dd-MM-yyyy HH:mm:ss")</td>
                                <td>
                                    <span class="badge bg-warning">Admin Onayı Bekliyor</span>
                                </td>
                                <td>
                                    <!-- Onayla Butonu -->
                                    <button onclick="approveOrder(@order.OrderID)" class="btn btn-sm btn-success" title="Onayla">
                                        <i class="fas fa-check"></i> Onayla
                                    </button>
                                </td>
                                <td>
                                    <!-- Sil Butonu -->
                                    <button onclick="deleteOrder(@order.OrderID)" class="btn btn-sm btn-danger" title="Sil">
                                        <i class="fas fa-trash-alt"></i> Sil
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr id="noOrdersRow">
                            <td colspan="10" class="text-center">Henüz sipariş yok.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let lastOrderId = 0;

        // Tarih formatı düzenleme fonksiyonu - Geliştirilmiş
                function formatDate(dateString) {
            if (!dateString) return 'Belirtilmemiş';

            let date = new Date(dateString);
            if (isNaN(date.getTime())) {
                console.error('Geçersiz tarih:', dateString);
                return 'Geçersiz Tarih';
            }

            return date.toLocaleString('tr-TR', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            });
        }

        // Öncelik skoru hesaplama fonksiyonu - Geliştirilmiş
                function calculatePriorityScore(order) {
            try {
                const BeklemeSureAgi = 0.5;

                // Tarihi kontrol et ve ISO formatını kullan
                let orderDate = new Date(order.orderDate);
                if (isNaN(orderDate.getTime())) {
                    console.error('Geçersiz tarih:', order.orderDate);
                    return 0; // Hatalı tarih varsa 0 döndür
                }

                const now = new Date();
                const waitingTime = Math.max(0, (now - orderDate) / 1000); // Saniye cinsinden bekleme süresi

                const customerTypeScore = order.customerType === "Premium" ? 15 : 10;

                const score = customerTypeScore + (waitingTime * BeklemeSureAgi);
                return isNaN(score) ? 0 : score;
            } catch (error) {
                console.error('Öncelik skoru hesaplama hatası:', error);
                return 0;
            }
        }

        // Siparişleri öncelik skoruna göre sırala ve tabloyu güncelle
                function sortAndUpdateTable(orders) {
            try {
                const ordersWithScore = orders
                    .filter(order => order && order.orderID)
                    .map(order => ({
                        ...order,
                        priorityScore: calculatePriorityScore(order),
                        orderDate: order.orderDate || 'Belirtilmemiş',
                        status: order.status || 'AwaitingApproval',
                    }))
                    .sort((a, b) => b.priorityScore - a.priorityScore);

                const tbody = $('.table tbody');
                tbody.html('');

                ordersWithScore.forEach(order => {
                    const formattedDate = formatDate(order.orderDate);
                    const row = `
                        <tr id="order-${order.orderID}" data-order-date="${order.orderDate}">
                            <td>${order.orderID}</td>
                            <td>${order.productName || 'Belirtilmemiş'}</td>
                            <td>${order.customerID || 'Belirtilmemiş'}</td>
                            <td>${order.quantity || 0}</td>
                            <td>₺${order.totalPrice ? order.totalPrice.toFixed(2) : '0.00'}</td>
                            <td>${formattedDate}</td>
                            <td>${getStatusBadge(order.status)}</td>
                            <td>Öncelik: ${order.priorityScore.toFixed(2)}</td>
                            <td>
                                <button onclick="approveOrder(${order.orderID})" class="btn btn-sm btn-success" title="Onayla">
                                    <i class="fas fa-check"></i> Onayla
                                </button>
                            </td>
                            <td>
                                <button onclick="deleteOrder(${order.orderID})" class="btn btn-sm btn-danger" title="Sil">
                                    <i class="fas fa-trash-alt"></i> Sil
                                </button>
                            </td>
                        </tr>
                    `;
                    tbody.append(row);
                });
            } catch (error) {
                console.error('Tablo güncelleme hatası:', error);
            }
        }

        // Yeni siparişleri kontrol eden fonksiyon - Geliştirilmiş
        function checkNewOrders() {
            $.ajax({
                url: '/Admin/GetNewOrders',
                type: 'GET',
                data: { lastOrderId: lastOrderId },
                success: function(response) {
                    if (response && response.success && response.orders && response.orders.length > 0) {
                        // Mevcut siparişleri al
                        const existingOrders = [];
                        $('.table tbody tr').each(function() {
                            const $row = $(this);
                            try {
                                const orderData = {
                                    orderID: parseInt($row.attr('id').replace('order-', '')),
                                    customerID: $row.find('td:eq(1)').text(),
                                    productName: $row.find('td:eq(2)').text(),
                                    quantity: parseInt($row.find('td:eq(3)').text()) || 0,
                                    totalPrice: parseFloat($row.find('td:eq(4)').text().replace(' ₺', '')) || 0,
                                    orderDate: new Date($row.data('order-date')),
                                    status: $row.find('td:eq(6)').find('span').text(),
                                    customerType: $row.data('customer-type') || 'Normal'
                                };
                                if (!isNaN(orderData.orderID)) {
                                    existingOrders.push(orderData);
                                }
                            } catch (error) {
                                console.error('Sipariş verisi okuma hatası:', error);
                            }
                        });

                        // Yeni siparişlerin ID'lerini güncelle
                        const newOrderIds = response.orders.map(order => order.orderID);
                        if (newOrderIds.length > 0) {
                            lastOrderId = Math.max(...newOrderIds);
                        }

                        // Tüm siparişleri birleştir ve sırala
                        const allOrders = [...existingOrders, ...response.orders];
                        sortAndUpdateTable(allOrders);
                    }
                }
            });
        }

        // Mevcut siparişlerin öncelik skorlarını güncelle
                function updateExistingOrdersPriority() {
            const existingOrders = [];
            $('.table tbody tr').each(function () {
                const $row = $(this);

                // Sipariş verilerini tablodan al
                const orderData = {
                    orderID: parseInt($row.attr('id').replace('order-', '')),
                    customerID: $row.find('td:eq(1)').text(),
                    productName: $row.find('td:eq(2)').text(),
                    quantity: parseInt($row.find('td:eq(3)').text()),
                    totalPrice: parseFloat($row.find('td:eq(4)').text().replace(' ₺', '')),
                    orderDate: new Date($row.find('td:eq(5)').text()), // Tarihi doğrudan tablodan oku
                    status: $row.find('td:eq(6)').find('span').text(),
                    customerType: $row.data('customer-type') || 'Normal',
                };

                // Tarih formatını kontrol et ve geçerli olduğundan emin ol
                if (isNaN(orderData.orderDate.getTime())) {
                    console.error(Geçersiz tarih: ${orderData.orderDate});
                    return; // Hatalı tarih varsa bu satırı atla
                }

                // Yeni öncelik skorunu hesapla
                const newPriorityScore = calculatePriorityScore(orderData);

                // Tablodaki mevcut satırı güncelle
                $row.find('td:eq(7)').text(Öncelik: ${newPriorityScore.toFixed(2)});

                // Güncellenen sipariş verisini ekle
                existingOrders.push({ ...orderData, priorityScore: newPriorityScore });
            });

            if (existingOrders.length > 0) {
                sortAndUpdateTable(existingOrders); // Güncellenmiş verileri tekrar sırala ve tabloyu yenile
            }
        }

        // Status badge fonksiyonu güncellendi
        function getStatusBadge(status) {
            switch (status ? status.toLowerCase() : '') {
                case "completed":
                    return '<span class="badge bg-success">Tamamlandı</span>';
                case "pending":
                    return '<span class="badge bg-warning text-dark">Bekliyor</span>';
                case "cancelled":
                    return '<span class="badge bg-danger">İptal Edildi</span>';
                case "awaitingapproval":
                    return '<span class="badge bg-secondary">Admin Onayı Bekliyor</span>';
                default:
                    return '<span class="badge bg-secondary">Durum Belirtilmemiş</span>';
            }
        }

        // Tüm siparişleri onaylama fonksiyonu
        function approveAllOrders() {
            Swal.fire({
                title: 'Tüm Siparişleri Onaylamak İstiyor Musunuz?',
                text: "Bekleyen tüm siparişleri onaylamaya devam etmek istiyor musunuz?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#28a745',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Evet, Hepsini Onayla',
                cancelButtonText: 'İptal'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '/Admin/ApproveAllOrders',
                        type: 'POST',
                        success: function (response) {
                            if (response.success) {
                                // Tüm bekleyen siparişleri animasyonlu şekilde kaldır
                                $('.table tbody tr').fadeOut(400, function() {
                                    $(this).remove();
                                });
                                Swal.fire('Onaylandı!', response.message, 'success');
                            } else {
                                Swal.fire('Hata!', response.message, 'error');
                            }
                        },
                        error: function () {
                            Swal.fire('Hata!', 'Siparişler onaylanırken bir hata oluştu.', 'error');
                        }
                    });
                }
            });
        }

                function rejectAllOrders() {
            Swal.fire({
                title: 'Tüm Siparişleri Reddetmek İstiyor Musunuz?',
                text: "Bekleyen tüm siparişleri reddetmek istediğinize emin misiniz?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#ffc107',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Evet, Hepsini Reddet',
                cancelButtonText: 'İptal'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '/Admin/RejectAllOrders',
                        type: 'POST',
                        success: function(response) {
                            if (response.success) {
                                // Animasyonlu kaldırma efekti
                                $('.table tbody tr').fadeOut(400, function() {
                                    $(this).remove();
                                });
                                // Başarı mesajı
                                Swal.fire('Reddedildi!', response.message, 'success');
                                // Logları güncelle
                                fetchLogs();
                            } else {
                                Swal.fire('Hata!', response.message, 'error');
                            }
                        },
                        error: function() {
                            Swal.fire('Hata!', 'Siparişler reddedilirken bir hata oluştu.', 'error');
                        }
                    });
                }
            });
        }

        // Sayfa yüklendiğinde ve belirli aralıklarla çalışacak işlemler
        $(document).ready(function() {
            // İlk yükleme
            $.ajax({
                url: '/Admin/GetAwaitingApprovalOrders',
                method: 'GET',
                success: function(response) {
                    if (response.success && response.orders && response.orders.length > 0) {
                        lastOrderId = Math.max(...response.orders.map(order => order.orderID));
                        sortAndUpdateTable(response.orders);
                    }
                },
                error: function(error) {
                    console.error("Siparişler yüklenirken hata:", error);
                }
            });

            // Yeni siparişleri kontrol et
            setInterval(checkNewOrders, 500);

            // Her 5 saniyede bir mevcut siparişlerin önceliklerini güncelle
            setInterval(updateExistingOrdersPriority, 5000);
        });
        function approveOrder(orderId) {
            Swal.fire({
                title: 'Bu siparişi onaylamak istiyor musunuz?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#28a745',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Evet, Onayla',
                cancelButtonText: 'İptal'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '/Admin/ApproveOrder',
                        type: 'POST',
                        data: { orderId: orderId },
                        success: function(response) {
                            if (response.success) {
                                $(#order-${orderId}).fadeOut(400, function() {
                                    $(this).remove();
                                });
                                Swal.fire('Başarılı!', response.message, 'success');
                            } else {
                                Swal.fire('Hata!', response.message, 'error');
                            }
                        },
                        error: function() {
                            Swal.fire('Hata!', 'Sipariş onaylanırken bir hata oluştu.', 'error');
                        }
                    });
                }
            });
        }
        function deleteOrder(orderId) {
            Swal.fire({
                title: 'Bu siparişi silmek istiyor musunuz?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Evet, Sil',
                cancelButtonText: 'İptal'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '/Admin/DeleteOrder',
                        type: 'POST',
                        data: { orderId: orderId },
                        success: function(response) {
                            if (response.success) {
                                $(#order-${orderId}).fadeOut(400, function() {
                                    $(this).remove();
                                });
                                Swal.fire('Başarılı!', response.message, 'success');
                            } else {
                                Swal.fire('Hata!', response.message, 'error');
                            }
                        },
                        error: function() {
                            Swal.fire('Hata!', 'Sipariş silinirken bir hata oluştu.', 'error');
                        }
                    });
                }
            });
        }

    </script>
}

<script>
    function fetchLogs() {
        $.ajax({
            url: '@Url.Action("FetchLogs", "Admin")', // FetchLogs action'ı
            method: 'GET',
            success: function (data) {
                $('#logList').html(''); // Mevcut logları temizle
                data.forEach(function (log) {
                    const logItem = `
                        <li>
                            <span><strong>${log.logType}:</strong> ${log.logDetails}</span>
                            <div style="font-size: 10px; color: #888; margin-top: 5px;">${log.logDate}</div>
                        </li>
                    `;
                    $('#logList').append(logItem);
                });
            },
            error: function () {
                console.error("Loglar yüklenemedi.");
            }
        });
    }

    // Logları her saniyede bir güncelle
    setInterval(fetchLogs, 500);

    // Sayfa yüklendiğinde logları getir
    $(document).ready(fetchLogs);

</script>